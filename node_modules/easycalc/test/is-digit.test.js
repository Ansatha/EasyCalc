"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const tokenizer_1 = require("../lib/tokenizer");
describe("isDigit", () => {
    it("returns true on digits passed as numbers", () => {
        const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        for (let digit of digits)
            chai_1.assert.isTrue(tokenizer_1.isDigit(digit), digit.toString());
    });
    it("returns true on digits passed as strings", () => {
        const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(u => `${u}`);
        for (let digit of digits)
            chai_1.assert.isTrue(tokenizer_1.isDigit(digit), digit.toString());
    });
    it("returns false on arbitrary symbols", () => {
        const symbols = ["a", ",", ".", "&", "聖"];
        for (let symbol of symbols)
            chai_1.assert.isFalse(tokenizer_1.isDigit(symbol), symbol);
    });
    it("returns false on empty string", () => {
        chai_1.assert.isFalse(tokenizer_1.isDigit(""));
    });
    it("returns false on whitespaces", () => {
        chai_1.assert.isFalse(tokenizer_1.isDigit(" "));
        chai_1.assert.isFalse(tokenizer_1.isDigit("\t"));
    });
    it("returns false if string is not of length 1", () => {
        const strings = ["42", "abc", "4av", "a3"];
        for (let str of strings) {
            chai_1.assert.isFalse(tokenizer_1.isDigit(str), str);
        }
    });
});
//# sourceMappingURL=is-digit.test.js.map