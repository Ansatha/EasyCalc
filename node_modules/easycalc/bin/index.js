#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const computer_1 = require("../lib/computer");
const readline = require("readline");
const fs = require("fs");
function REPL() {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    const computer = new computer_1.Computer();
    function lineRead(line) {
        if (line.match(/^\s*__vars__\s*$/)) {
            for (var key of Object.keys(computer.memory)) {
                var num = computer.memory[key];
                console.log(`${key}: ${num.toFixed(num.decimalPlaces())}`);
            }
        }
        else if (line != "") {
            try {
                const result = computer.compute(line);
                console.log(result.toFixed(result.decimalPlaces()));
            }
            catch (err) {
                console.log(err.message);
            }
        }
        rl.question("> ", lineRead);
    }
    rl.question("> ", lineRead);
}
function fromFile(filename) {
    const computer = new computer_1.Computer();
    let lines;
    try {
        lines = fs.readFileSync(filename, "utf-8").split("\n");
    }
    catch (err) {
        console.error(`cannot open file ${filename} for reading.`);
        return;
    }
    for (const line of lines)
        if (line != "")
            computer.compute(line);
    console.log(computer.lastComp.toString());
}
if (process.argv.length == 3) {
    fromFile(process.argv[process.argv.length - 1]);
}
else if (process.argv.length == 2) {
    REPL();
}
else {
    console.error("Usage: " + process.argv0 + " " + process.argv[1] + " [FILE]");
    process.exit(1);
}
//# sourceMappingURL=index.js.map