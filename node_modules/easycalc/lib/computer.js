"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = require("bignumber.js");
const AST = require("./ast");
const computer_error_1 = require("./computer-error");
const parser_1 = require("./parser");
class Computer {
    constructor() {
        this.memory = {
            __precision__: new bignumber_js_1.default(20) // default value
        };
        this.cached = {};
        this.currentLine = 1;
    }
    computeUnary(node) {
        switch (node.operator) {
            case "+":
                return this.computeNode(node.value);
            case "-":
                return this.computeNode(node.value).negated();
            default:
                throw new computer_error_1.default(`Unknown operator`, node.position.start, node.position.line);
        }
    }
    computeBinary(node) {
        const lr = this.computeNode(node.right);
        if (node.operator === "=") {
            const id = node.left.value;
            if (id == "_")
                throw new computer_error_1.default("Cannot write into read-only variable _", node.position.start, node.position.line);
            if (id == "__precision__")
                bignumber_js_1.default.config({ DECIMAL_PLACES: lr.toNumber() });
            this.memory[id] = lr;
            return lr;
        }
        const lc = this.computeNode(node.left);
        switch (node.operator) {
            case "+":
                return lc.plus(lr);
            case "-":
                return lc.minus(lr);
            case "*":
                return lc.times(lr);
            case "/":
                return lc.dividedBy(lr);
            default:
                throw new computer_error_1.default(`Unknown operator`, node.position.start, node.position.line);
        }
    }
    computeNode(node) {
        switch (node.kind) {
            case AST.NodeKind.Const:
                if (this.cached[node.value])
                    return this.cached[node.value];
                return this.cached[node.value] = new bignumber_js_1.default(node.value);
            case AST.NodeKind.Identifier:
                if (node.value == "_")
                    return this.lastComp;
                if (this.memory[node.value])
                    return this.memory[node.value];
                throw new computer_error_1.default(`Usage of uninitialized variable ${node.value}`, node.position.start, node.position.line);
            case AST.NodeKind.Unary:
                return this.computeUnary(node);
            case AST.NodeKind.Binary:
                return this.computeBinary(node);
        }
    }
    compute(line) {
        let ast = parser_1.parse(line, this.currentLine++);
        const result = this.computeNode(ast);
        this.lastComp = result;
        return result;
    }
}
exports.Computer = Computer;
//# sourceMappingURL=computer.js.map